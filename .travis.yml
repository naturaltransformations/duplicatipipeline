language: minimal
services: docker
before_install:
  - sudo apt-get install moreutils
  - set -o pipefail
addons:
  coverity_scan:
    project:
      name: "duplicati/duplicati"
      description: "Duplicati Build submitted via Travis CI"
    notification_email: hendrik@natural-transformations.com
    build_command_prepend: "msbuild /t:Clean"
    build_command: "msbuild /t:Rebuild"
    branch_pattern: coverity_scan
env:
  global:
    # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
    #   via the "travis encrypt" command using the project repo's public key
    - secure: "ijaQDcVcMo/utuP514FiDZVGR5LJbATWmYDmgRIIaI0YG2Rk6uuJp9XXDXr8sx66JWttPGgs7Htqfy50VKHdr7nsfyCQCRNGmqF+OJeUgAQMj5spxn9A7PZY9+GVhnXoJ06wvYjCv5MPeLBMDK/KpIM5Ny5IG+TKzQy4U7Dyg0riMUT61aqzxSjTGfHZPmaqBICJTzsRmeGHglemFUz/1B4NAN+IeAtXoH9YIfA2LjJfYmMLckPgFQLKN/tQRaGPWXh77y0qVgA++K8UVu5W3yGo3JXBPDdabGgKs9BPlfN5/Ixnkcy6ekAubDA/Aspur9x7/szj4/AnGMY6frNB33nQcnJQZ/51GYKr6CXCmjoJQuWc8ZKdEMqDn3w/kyEzvluSjAsJNRVboeWPE4VfpAeUBsjQ+TuEQi8WXhN8VJgZV7yCkVlZTVbhtOxMPsBiFb74lpWC2iQuWLJv9ED6vyXZVzZhNtfjXNXNZzIwYxbcd7I0ZQ8fmDstFnvBJveJby2ZRpECXTbc03eIUq1SAaVJJY2r47RD1PwVqM3xvUTljIqtKdyIz915mEOjqG1BnCDaiGHYJ4byuDDeIUZO9X70s60Gh4hupZA2Ruup0v7SfYgkto6aNcStd0NYd716Vd7hqXNTp6nu01L5YYJDY4h5sHyBXVXbxCKlUb01kUw="
    - USAGEREPORTER_Duplicati_LEVEL=none
    - AUTOUPDATER_Duplicati_SKIP_UPDATE=1
    - BUILD_CACHE=${TRAVIS_BUILD_DIR}/.build_cache
    - TEST_CACHE=${TRAVIS_BUILD_DIR}/.test_cache
    - ARCHIVE_CACHE=${TRAVIS_BUILD_DIR}/.zip_cache
    - INSTALLER_DEBIAN_CACHE=${TRAVIS_BUILD_DIR}/.installer_debian_cache
    - INSTALLER_FEDORA_CACHE=${TRAVIS_BUILD_DIR}/.installer_fedora_cache
    - INSTALLER_SYNOLOGY_CACHE=${TRAVIS_BUILD_DIR}/.installer_synology_cache
    - INSTALLER_DOCKER_CACHE=${TRAVIS_BUILD_DIR}/.installer_docker_cache
    - UPLOAD_CACHE=${TRAVIS_BUILD_DIR}/.upload_cache
# matrix expansion within jobs would be good:
# https://github.com/travis-ci/travis-ci/issues/8295

# There is one cache per branch, so concurrent builds on different branches possible!
# DO NOT SET ENVIRONMENT VARIABLES WITHIN JOBS, OR CACHES WILL NOT BE SHARED AMONGST JOBS!

jobs:
  include:
    - stage: build
      script:
          - ${TRAVIS_BUILD_DIR}/pipeline/shared/sync_repo.sh
          - ./pipeline/stage_build/trigger.sh --sourcecache "${TRAVIS_BUILD_DIR}/duplicati" --targetcache "${BUILD_CACHE}" | ts
      cache:
        directories:
          - $BUILD_CACHE



    - stage: unit tests
      cache:
        directories:
          - $BUILD_CACHE
          - $HOME/download/
      script:
        - ./pipeline/stage_unittests/trigger.sh --sourcecache $BUILD_CACHE --targetcache $TEST_CACHE --testcategories BulkNormal --testdata data.zip | ts
    - stage: unit tests
      cache:
        directories:
          - $BUILD_CACHE
          - $HOME/download/
      script:
        - ./pipeline/stage_unittests/trigger.sh --sourcecache $BUILD_CACHE --targetcache $TEST_CACHE --testcategories BulkNoSize --testdata data.zip | ts
    - stage: unit tests
      cache:
        directories:
          - $BUILD_CACHE
          - $HOME/download/
      script:
        - ./pipeline/stage_unittests/trigger.sh --sourcecache $BUILD_CACHE --targetcache $TEST_CACHE --testcategories SVNDataLong,SVNData --testdata DSMCBE.zip |  ts
    - stage: unit tests
      cache:
        directories:
          - $BUILD_CACHE
          - $HOME/download/
      script:
        - ./pipeline/stage_unittests/trigger.sh --sourcecache $BUILD_CACHE --targetcache $TEST_CACHE --testcategories Border | ts
    - stage: unit tests
      cache:
        directories:
          - $BUILD_CACHE
          - $HOME/download/
      script:
        - ./pipeline/stage_unittests/trigger.sh --sourcecache $BUILD_CACHE --targetcache $TEST_CACHE --testcategories Filter,Targeted,Purge,Serialization,WebApi,Utility,UriUtility,IO | ts



    - stage: integration tests
      cache:
        directories:
          - $BUILD_CACHE
          - $HOME/download/
      script:
        - ./pipeline/stage_integrationtests/trigger.sh --sourcecache $BUILD_CACHE --targetcache $TEST_CACHE | ts
      addons:
        sauce_connect:
          username: $SAUCE_USERNAME
          access_key: $SAUCE_ACCESS_KEY



    - stage: create archive
      cache:
        directories:
          - $BUILD_CACHE
          - $ARCHIVE_CACHE
      script:
        - ./pipeline/stage_createarchive/trigger.sh --signingkeyfilepassword "sdfsdgsagfwefefqfq" --signingkeyfile "/keys/bla.key" --sourcecache $BUILD_CACHE --targetcache $ARCHIVE_CACHE | ts



    - stage: create installers
      cache:
        directories:
          - $ARCHIVE_CACHE
          - $INSTALLER_DEBIAN_CACHE
          - $INSTALLER_FEDORA_CACHE
          - $INSTALLER_SYNOLOGY_CACHE
          - $INSTALLER_DOCKER_CACHE
        timeout: 1000
      script:
        - ./pipeline/stage_createinstallers/trigger.sh --sourcecache $ARCHIVE_CACHE --targetcache $INSTALLER_DEBIAN_CACHE --installers debian | ts
        - ./pipeline/stage_createinstallers/trigger.sh --sourcecache $ARCHIVE_CACHE --targetcache $INSTALLER_FEDORA_CACHE --installers fedora | ts
        - ./pipeline/stage_createinstallers/trigger.sh --sourcecache $ARCHIVE_CACHE --targetcache $INSTALLER_SYNOLOGY_CACHE --installers synology | ts
        - ./pipeline/stage_createinstallers/trigger.sh --sourcecache $ARCHIVE_CACHE --targetcache $INSTALLER_DOCKER_CACHE --installers docker | ts



    - stage: upload
      cache:
        directories:
          - $INSTALLER_DEBIAN_CACHE
          - $INSTALLER_FEDORA_CACHE
          - $INSTALLER_SYNOLOGY_CACHE
          - $INSTALLER_DOCKER_CACHE
      script:
        - ./pipeline/stage_deploy/trigger.sh --sourcecache "$INSTALLER_DEBIAN_CACHE" --sourcecache "$INSTALLER_FEDORA_CACHE" --sourcecache "$INSTALLER_SYNOLOGY_CACHE" --sourcecache "$INSTALLER_DOCKER_CACHE"  --targetcache "$UPLOAD_CACHE" --dockeruser "$DOCKER_USER" --dockerpassword "$DOCKER_PASSWORD" --awskeyid "$AWS_ACCESS_KEY_ID" --awssecret "$AWS_SECRET_ACCESS_KEY" --awsbucket "$AWS_BUCKET_URI" | ts
